import { AfterViewInit, ElementRef, OnDestroy, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { NgWhiteboardService } from './ng-whiteboard.service';
import { ElementTypeEnum, IAddImage, LineCapEnum, LineJoinEnum, ToolsEnum, WhiteboardElement, WhiteboardOptions } from './models';
import { ContainerElement, Selection } from 'd3';
import * as i0 from "@angular/core";
export declare class NgWhiteboardComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    private whiteboardService;
    svgContainer: ElementRef<ContainerElement>;
    private textInput;
    private _data;
    set data(data: WhiteboardElement[]);
    get data(): WhiteboardElement[];
    options: WhiteboardOptions;
    set selectedTool(tool: ToolsEnum);
    get selectedTool(): ToolsEnum;
    drawingEnabled: boolean;
    canvasWidth: number;
    canvasHeight: number;
    fullScreen: boolean;
    center: boolean;
    strokeColor: string;
    strokeWidth: number;
    backgroundColor: string;
    lineJoin: LineJoinEnum;
    lineCap: LineCapEnum;
    fill: string;
    zoom: number;
    fontFamily: string;
    fontSize: number;
    dasharray: string;
    dashoffset: number;
    x: number;
    y: number;
    enableGrid: boolean;
    gridSize: number;
    snapToGrid: boolean;
    persistenceId: string | undefined;
    ready: EventEmitter<any>;
    dataChange: EventEmitter<WhiteboardElement[]>;
    clear: EventEmitter<any>;
    undo: EventEmitter<any>;
    redo: EventEmitter<any>;
    save: EventEmitter<string>;
    imageAdded: EventEmitter<any>;
    selectElement: EventEmitter<WhiteboardElement | null>;
    deleteElement: EventEmitter<WhiteboardElement>;
    toolChanged: EventEmitter<ToolsEnum>;
    private selection;
    private _subscriptionList;
    private _initialData;
    private undoStack;
    private redoStack;
    private _selectedTool;
    selectedElement: WhiteboardElement;
    types: typeof ElementTypeEnum;
    tools: typeof ToolsEnum;
    tempElement: WhiteboardElement;
    tempDraw: [number, number][];
    rubberBox: {
        x: number;
        y: number;
        width: number;
        height: number;
        display: string;
    };
    constructor(whiteboardService: NgWhiteboardService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private _initInputsFromOptions;
    private _initObservables;
    initalizeEvents(selection: Selection<Element, unknown, null, undefined>): void;
    handleStartEvent(): void;
    handleDragEvent(): void;
    handleEndEvent(): void;
    handleStartBrush(): void;
    handleDragBrush(): void;
    handleEndBrush(): void;
    handleImageTool(): void;
    handleDrawImage(imageSrc: IAddImage): void;
    handleStartLine(): void;
    handleDragLine(): void;
    handleEndLine(): void;
    handleStartRect(): void;
    handleDragRect(): void;
    handleEndRect(): void;
    handleStartEllipse(): void;
    handleDragEllipse(): void;
    handleEndEllipse(): void;
    handleTextTool(): void;
    handleTextDrag(): void;
    handleTextEnd(): void;
    handleSelectTool(): void;
    handleEraserTool(): void;
    finishTextInput(): void;
    updateTextItem(value: string): void;
    setSelectedElement(element: WhiteboardElement): void;
    clearSelectedElement(): void;
    private saveSvg;
    private svgString2Image;
    private saveAsSvg;
    private download;
    private _pushToData;
    private _clearSvg;
    private undoDraw;
    private redoDraw;
    private _pushToUndo;
    private _reset;
    private updateLocalStorage;
    private _generateNewElement;
    private _calculateXAndY;
    private resizeScreen;
    private _snapToAngle;
    private _snapToGrid;
    private _getElementBbox;
    private _getMouseTarget;
    private _showGrips;
    moveSelect(downEvent: PointerEvent): void;
    resizeSelect(downEvent: PointerEvent): void;
    private _resizeLine;
    private _resizeElipse;
    private _resizeDefault;
    private _unsubscribe;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgWhiteboardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgWhiteboardComponent, "ng-whiteboard", never, { "data": "data"; "options": "options"; "selectedTool": "selectedTool"; "drawingEnabled": "drawingEnabled"; "canvasWidth": "canvasWidth"; "canvasHeight": "canvasHeight"; "fullScreen": "fullScreen"; "center": "center"; "strokeColor": "strokeColor"; "strokeWidth": "strokeWidth"; "backgroundColor": "backgroundColor"; "lineJoin": "lineJoin"; "lineCap": "lineCap"; "fill": "fill"; "zoom": "zoom"; "fontFamily": "fontFamily"; "fontSize": "fontSize"; "dasharray": "dasharray"; "dashoffset": "dashoffset"; "x": "x"; "y": "y"; "enableGrid": "enableGrid"; "gridSize": "gridSize"; "snapToGrid": "snapToGrid"; "persistenceId": "persistenceId"; }, { "ready": "ready"; "dataChange": "dataChange"; "clear": "clear"; "undo": "undo"; "redo": "redo"; "save": "save"; "imageAdded": "imageAdded"; "selectElement": "selectElement"; "deleteElement": "deleteElement"; "toolChanged": "toolChanged"; }, never, never, false>;
}
